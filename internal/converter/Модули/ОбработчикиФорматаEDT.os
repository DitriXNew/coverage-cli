
Перем КешКаталогов;

#Область ОбработчикиДелегатов

Функция НайтиМодульУправляемогоПриложения(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, ".", ИдентификаторПрограммногоМодуля);
	
	Если КаталогОбъектаМетаданных = Неопределено Тогда
	 	ОбработчикиФорматов.НеНайденМодульУправляемогоПриложения(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбъединитьПути(ПутьКИсходнымФайлам, "Configuration", "ManagedApplicationModule.bsl");

КонецФункции

Функция НайтиМодульСеанса(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, ".", ИдентификаторПрограммногоМодуля);
	
	Если КаталогОбъектаМетаданных = Неопределено Тогда
	 	ОбработчикиФорматов.НеНайденМодульСеанса(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбъединитьПути(ПутьКИсходнымФайлам, "Configuration", "SessionModule.bsl");

КонецФункции

Функция НайтиОбщийМодуль(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт

	КаталогОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
		"CommonModules", ИдентификаторПрограммногоМодуля);
	
	Если КаталогОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденОбщийМодуль(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогОбъектаМетаданных.ПолноеИмя, "Module.bsl");	

КонецФункции

Функция НайтиМодульМенеджераЗначения(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
		"Constants", ИдентификаторПрограммногоМодуля);

	Если КаталогОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульМенеджераЗначения(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогОбъектаМетаданных.ПолноеИмя, "ValueManagerModule.bsl");	

КонецФункции

Функция НайтиМодульМенеджераНастроек(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
		"SettingsStorages", ИдентификаторПрограммногоМодуля);

	Если КаталогОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульМенеджераНастроек(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогОбъектаМетаданных.ПолноеИмя, "ManagerModule.bsl");	

КонецФункции

Функция НайтиМодульМенеджера(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт

	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("ExchangePlans");
	КаталогиТиповОбъектовМетаданных.Добавить("FilterCriteria");
	КаталогиТиповОбъектовМетаданных.Добавить("SettingsStorages");
	КаталогиТиповОбъектовМетаданных.Добавить("Catalogs");
	КаталогиТиповОбъектовМетаданных.Добавить("Documents");
	КаталогиТиповОбъектовМетаданных.Добавить("Enums");
	КаталогиТиповОбъектовМетаданных.Добавить("Reports");
	КаталогиТиповОбъектовМетаданных.Добавить("DataProcessors");
	КаталогиТиповОбъектовМетаданных.Добавить("DocumentJournals");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCharacteristicTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfAccounts");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCalculationTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("InformationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccumulationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccountingRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("CalculationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("BusinessProcesses");
	КаталогиТиповОбъектовМетаданных.Добавить("Tasks");

	КаталогОбъектаМетаданных = НайтиОбъектМетаданныхВКаталогах(ПутьКИсходнымФайлам, 
		КаталогиТиповОбъектовМетаданных, ИдентификаторПрограммногоМодуля);
	
	Если КаталогОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульМенеджера(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогОбъектаМетаданных.ПолноеИмя, "ManagerModule.bsl");	

КонецФункции

Функция НайтиМодульОбъекта(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("ExchangePlans");
	КаталогиТиповОбъектовМетаданных.Добавить("Catalogs");
	КаталогиТиповОбъектовМетаданных.Добавить("Documents");
	КаталогиТиповОбъектовМетаданных.Добавить("Reports");
	КаталогиТиповОбъектовМетаданных.Добавить("DataProcessors");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCharacteristicTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfAccounts");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCalculationTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("BusinessProcesses");
	КаталогиТиповОбъектовМетаданных.Добавить("Tasks");

	КаталогОбъектаМетаданных = НайтиОбъектМетаданныхВКаталогах(ПутьКИсходнымФайлам, 
		КаталогиТиповОбъектовМетаданных, ИдентификаторПрограммногоМодуля);

	Если КаталогОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульОбъекта(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбъединитьПути(КаталогОбъектаМетаданных.ПолноеИмя, "ObjectModule.bsl");	

КонецФункции

Функция НайтиМодульНабораЗаписей(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("Sequences");
	КаталогиТиповОбъектовМетаданных.Добавить("InformationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccumulationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccountingRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("CalculationRegisters");

	КаталогОбъектаМетаданных = НайтиОбъектМетаданныхВКаталогах(ПутьКИсходнымФайлам, 
		КаталогиТиповОбъектовМетаданных, ИдентификаторПрограммногоМодуля);

	Если КаталогОбъектаМетаданных = Неопределено Тогда
		КаталогОбъектаМетаданных = НайтиПодОбъектМетаданных(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля,
			"CalculationRegisters", "Recalculations", "recalculations");
	КонецЕсли;	

	Если КаталогОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульНабораЗаписей(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбъединитьПути(КаталогОбъектаМетаданных.ПолноеИмя, "RecordSetModule.bsl");	

КонецФункции

Функция НайтиМодульФормы(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("ExchangePlans");
	КаталогиТиповОбъектовМетаданных.Добавить("FilterCriteria");
	КаталогиТиповОбъектовМетаданных.Добавить("SettingsStorages");
	КаталогиТиповОбъектовМетаданных.Добавить("Catalogs");
	КаталогиТиповОбъектовМетаданных.Добавить("Documents");
	КаталогиТиповОбъектовМетаданных.Добавить("DocumentJournals");
	КаталогиТиповОбъектовМетаданных.Добавить("Enums");
	КаталогиТиповОбъектовМетаданных.Добавить("Reports");
	КаталогиТиповОбъектовМетаданных.Добавить("DataProcessors");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCharacteristicTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfAccounts");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCalculationTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("InformationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccumulationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccountingRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("CalculationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("BusinessProcesses");
	КаталогиТиповОбъектовМетаданных.Добавить("Tasks");

	КаталогОбъектаМетаданных = НайтиПодОбъектыМетаданныхВКаталогах(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля,
		КаталогиТиповОбъектовМетаданных, "Forms", "forms");
	
	Если КаталогОбъектаМетаданных = Неопределено Тогда
		КаталогОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
			"CommonForms", ИдентификаторПрограммногоМодуля);
	КонецЕсли;

	Если КаталогОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульФормы(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогОбъектаМетаданных.ПолноеИмя, "Module.bsl");

КонецФункции

Функция НайтиМодульКоманды(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт

	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("ExchangePlans");
	КаталогиТиповОбъектовМетаданных.Добавить("FilterCriteria");
	КаталогиТиповОбъектовМетаданных.Добавить("Catalogs");
	КаталогиТиповОбъектовМетаданных.Добавить("Documents");
	КаталогиТиповОбъектовМетаданных.Добавить("DocumentJournals");
	КаталогиТиповОбъектовМетаданных.Добавить("Enums");
	КаталогиТиповОбъектовМетаданных.Добавить("Reports");
	КаталогиТиповОбъектовМетаданных.Добавить("DataProcessors");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCharacteristicTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfAccounts");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCalculationTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("InformationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccumulationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccountingRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("CalculationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("BusinessProcesses");
	КаталогиТиповОбъектовМетаданных.Добавить("Tasks");

	КаталогОбъектаМетаданных = НайтиПодОбъектыМетаданныхВКаталогах(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля,
		КаталогиТиповОбъектовМетаданных, "Commands", "commands");
	
	Если КаталогОбъектаМетаданных = Неопределено Тогда
		КаталогОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
			"CommonCommands", ИдентификаторПрограммногоМодуля);
	КонецЕсли;

	Если КаталогОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульКоманды(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогОбъектаМетаданных.ПолноеИмя, "CommandModule.bsl");

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФайлОбъектаМетаданных(КаталогОбъектаМетаданных)
	
	ФайлыМетаданных = НайтиФайлы(КаталогОбъектаМетаданных, "*.mdo");
	Если ФайлыМетаданных.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ФайлыМетаданных[0];

КонецФункции

Функция ИдентификаторОбъектаМетаданных(ФайлОбъектаМетаданных)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОбъектаМетаданных.ПолноеИмя);
	ЧтениеXML.ПерейтиКСодержимому();
	ИдентификаторМетаданных = ЧтениеXML.ЗначениеАтрибута("uuid");
	ЧтениеXML.Закрыть();

	Возврат ИдентификаторМетаданных;

КонецФункции

Функция ПодчиненныеОбъектыМетаданных(ФайлОбъектаМетаданных, ЛокальноеИмяПодОбъекта)

	Перерасчеты = Новый Структура;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОбъектаМетаданных.ПолноеИмя);
	ЧтениеXML.ПерейтиКСодержимому();
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл

		Если ЧтениеXML.ЛокальноеИмя = ЛокальноеИмяПодОбъекта Тогда

			ИдентификаторПерерасчета = ЧтениеXML.ЗначениеАтрибута("uuid");	
			ЧтениеXML.Прочитать();
			Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
				
				Если ЧтениеXML.ЛокальноеИмя = "name" Тогда
					ЧтениеXML.Прочитать();
					ИмяПерерасчета = ЧтениеXML.Значение;
					Перерасчеты.Вставить(ИмяПерерасчета, ИдентификаторПерерасчета);
					ЧтениеXML.Прочитать();
				Иначе
					ЧтениеXML.Пропустить();
				КонецЕсли;

				ЧтениеXML.Прочитать();

			КонецЦикла;
			ЧтениеXML.Прочитать();
		
		Иначе
			ЧтениеXML.Пропустить();
			ЧтениеXML.Прочитать();
		КонецЕсли;

	КонецЦикла;

	ЧтениеXML.Закрыть();

	Возврат Перерасчеты;

КонецФункции

Функция НайтиОбъектМетаданныхВКаталогах(ПутьКИсходнымФайлам, КаталогиТиповОбъектовМетаданных, 
		ИдентификаторПрограммногоМодуля)

	Результат = Неопределено;

	Для Каждого КаталогТипаОбъектовМетаданных Из КаталогиТиповОбъектовМетаданных Цикл

		Результат = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
			КаталогТипаОбъектовМетаданных, ИдентификаторПрограммногоМодуля);
		
		Если ТипЗнч(Результат) = Тип("Файл") Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция НайтиПодОбъектыМетаданныхВКаталогах(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля,
	КаталогиТиповОбъектовМетаданных, ТипОбъекта, ЛокальноеИмяТипа)

	Результат = Неопределено;

	Для Каждого КаталогТипаОбъектовМетаданных Из КаталогиТиповОбъектовМетаданных Цикл

		Результат = НайтиПодОбъектМетаданных(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля,
			КаталогТипаОбъектовМетаданных, ТипОбъекта, ЛокальноеИмяТипа);
		
		
		Если ТипЗнч(Результат) = Тип("Файл") Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция НайтиОбъектМетаданных(ПутьКИсходнымФайлам, ПодКаталогОбъектовМетаданных, ИдентификаторПрограммногоМодуля)
	
	ШаблонКлючаКеша = "%1+%2";
	
	КлючКеша = СтрШаблон(ШаблонКлючаКеша, ИдентификаторПрограммногоМодуля, ПутьКИсходнымФайлам);
	Результат = КешКаталогов.Получить(КлючКеша);
	Если ТипЗнч(Результат) = Тип("Файл") Тогда
		Возврат Результат;
	КонецЕсли;

	КаталогПоиска = ОбъединитьПути(ПутьКИсходнымФайлам, ПодКаталогОбъектовМетаданных);
	КаталогиОбъектовМетаданных = НайтиФайлы(КаталогПоиска, "*");
	Для Каждого КаталогОбъектаМетаданных Из КаталогиОбъектовМетаданных Цикл
		
		ФайлОбъектаМетаданных = ФайлОбъектаМетаданных(КаталогОбъектаМетаданных.ПолноеИмя);
		Если ФайлОбъектаМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИдентификаторОбъектаМетаданных = ИдентификаторОбъектаМетаданных(ФайлОбъектаМетаданных);
		
		КлючКеша = СтрШаблон(ШаблонКлючаКеша, ИдентификаторОбъектаМетаданных, ПутьКИсходнымФайлам);
		Если КешКаталогов.Получить(КлючКеша) = Неопределено Тогда
			КешКаталогов.Вставить(КлючКеша, КаталогОбъектаМетаданных);
		КонецЕсли;
		
		Если ИдентификаторОбъектаМетаданных = ИдентификаторПрограммногоМодуля Тогда
			Результат = КаталогОбъектаМетаданных;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция НайтиПодОбъектМетаданных(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля,
	КаталогТипаОбъектовМетаданных, ТипОбъекта, ЛокальноеИмяТипа)

	ШаблонКлючаКеша = "%1+%2";
	
	Результат = Неопределено;

	КаталогРегистрыРасчета = ОбъединитьПути(ПутьКИсходнымФайлам, КаталогТипаОбъектовМетаданных);
	КаталогиРегистровРасчета = НайтиФайлы(КаталогРегистрыРасчета, "*");
	Для Каждого КаталогРегистраРасчета Из КаталогиРегистровРасчета Цикл
		
		ФайлОбъектаМетаданных = ФайлОбъектаМетаданных(КаталогРегистраРасчета.ПолноеИмя);
		Если ФайлОбъектаМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПерерасчетыРегистра = ПодчиненныеОбъектыМетаданных(ФайлОбъектаМетаданных, ЛокальноеИмяТипа);
		Для Каждого КлючИЗначение Из ПерерасчетыРегистра Цикл

			ИдентификаторПерерасчета = КлючИЗначение.Значение;
			ИмяПерерасчета = КлючИЗначение.Ключ; 

			ИмяКаталогаПерерасчета = ОбъединитьПути(КаталогРегистраРасчета.ПолноеИмя, ТипОбъекта, ИмяПерерасчета);
			КаталогПерерасчета = Новый Файл(ИмяКаталогаПерерасчета);
			
			КлючКеша = СтрШаблон(ШаблонКлючаКеша, ИдентификаторПерерасчета, ПутьКИсходнымФайлам);
			Если КешКаталогов.Получить(КлючКеша) = Неопределено Тогда
				КешКаталогов.Вставить(КлючКеша, КаталогПерерасчета);
			КонецЕсли;

			Если ИдентификаторПерерасчета = ИдентификаторПрограммногоМодуля Тогда
				Результат = КаталогПерерасчета;
			КонецЕсли;

		КонецЦикла;		

		Если ТипЗнч(Результат) = Тип("Файл") Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

КешКаталогов = Новый Соответствие;