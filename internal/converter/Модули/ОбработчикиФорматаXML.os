
Перем КешФайлов;

#Область ОбработчикиДелегатов

Функция НайтиМодульУправляемогоПриложения(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	ФайлОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, ".", ИдентификаторПрограммногоМодуля);
	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульУправляемогоПриложения(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбъединитьПути(ПутьКИсходнымФайлам, "Ext", "ManagedApplicationModule.bsl");

КонецФункции

Функция НайтиМодульСеанса(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	ФайлОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, ".", ИдентификаторПрограммногоМодуля);
	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульСеанса(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбъединитьПути(ПутьКИсходнымФайлам, "Ext", "SessionModule.bsl");

КонецФункции

Функция НайтиОбщийМодуль(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт

	ФайлОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
		"CommonModules", ИдентификаторПрограммногоМодуля);
	
	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденОбщийМодуль(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	КаталогОбъектаМетаданных = КаталогОбъектаМетаданных(ФайлОбъектаМетаданных);

	Возврат ОбъединитьПути(КаталогОбъектаМетаданных, "Ext", "Module.bsl");	

КонецФункции

Функция НайтиМодульМенеджераЗначения(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	ФайлОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
		"Constants", ИдентификаторПрограммногоМодуля);

	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульМенеджераЗначения(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогОбъектаМетаданных = КаталогОбъектаМетаданных(ФайлОбъектаМетаданных);
	Возврат ОбъединитьПути(КаталогОбъектаМетаданных, "Ext", "ValueManagerModule.bsl");	

КонецФункции

Функция НайтиМодульМенеджераНастроек(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	ФайлОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
		"SettingsStorages", ИдентификаторПрограммногоМодуля);

	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеМодульМенеджераНастроек(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогОбъектаМетаданных = КаталогОбъектаМетаданных(ФайлОбъектаМетаданных);
	Возврат ОбъединитьПути(КаталогОбъектаМетаданных, "Ext", "ManagerModule.bsl");	

КонецФункции

Функция НайтиМодульМенеджера(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт

	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("ExchangePlans");
	КаталогиТиповОбъектовМетаданных.Добавить("FilterCriteria");
	КаталогиТиповОбъектовМетаданных.Добавить("SettingsStorages");
	КаталогиТиповОбъектовМетаданных.Добавить("Catalogs");
	КаталогиТиповОбъектовМетаданных.Добавить("Documents");
	КаталогиТиповОбъектовМетаданных.Добавить("Enums");
	КаталогиТиповОбъектовМетаданных.Добавить("Reports");
	КаталогиТиповОбъектовМетаданных.Добавить("DataProcessors");
	КаталогиТиповОбъектовМетаданных.Добавить("DocumentJournals");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCharacteristicTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfAccounts");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCalculationTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("InformationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccumulationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccountingRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("CalculationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("BusinessProcesses");
	КаталогиТиповОбъектовМетаданных.Добавить("Tasks");
	
	ФайлОбъектаМетаданных = НайтиОбъектМетаданныхВКаталогах(ПутьКИсходнымФайлам, 
		КаталогиТиповОбъектовМетаданных, ИдентификаторПрограммногоМодуля);
	
	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульМенеджера(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	КаталогОбъектаМетаданных = КаталогОбъектаМетаданных(ФайлОбъектаМетаданных);

	Возврат ОбъединитьПути(КаталогОбъектаМетаданных, "Ext", "ManagerModule.bsl");	

КонецФункции

Функция НайтиМодульОбъекта(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("ExchangePlans");
	КаталогиТиповОбъектовМетаданных.Добавить("Catalogs");
	КаталогиТиповОбъектовМетаданных.Добавить("Documents");
	КаталогиТиповОбъектовМетаданных.Добавить("Reports");
	КаталогиТиповОбъектовМетаданных.Добавить("DataProcessors");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCharacteristicTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfAccounts");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCalculationTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("BusinessProcesses");
	КаталогиТиповОбъектовМетаданных.Добавить("Tasks");

	ФайлОбъектаМетаданных = НайтиОбъектМетаданныхВКаталогах(ПутьКИсходнымФайлам, 
		КаталогиТиповОбъектовМетаданных, ИдентификаторПрограммногоМодуля);

	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульОбъекта(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогОбъектаМетаданных = КаталогОбъектаМетаданных(ФайлОбъектаМетаданных);
	Возврат ОбъединитьПути(КаталогОбъектаМетаданных, "Ext", "ObjectModule.bsl");	

КонецФункции

Функция НайтиМодульНабораЗаписей(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("Sequences");
	КаталогиТиповОбъектовМетаданных.Добавить("InformationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccumulationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccountingRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("CalculationRegisters");

	ФайлОбъектаМетаданных = НайтиОбъектМетаданныхВКаталогах(ПутьКИсходнымФайлам, 
		КаталогиТиповОбъектовМетаданных, ИдентификаторПрограммногоМодуля);

	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ФайлОбъектаМетаданных = НайтиПодОбъектыМетаданных(ПутьКИсходнымФайлам, 
			"CalculationRegisters", "Recalculations", ИдентификаторПрограммногоМодуля);
	КонецЕсли;

	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульНабораЗаписей(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогОбъектаМетаданных = КаталогОбъектаМетаданных(ФайлОбъектаМетаданных);
	Возврат ОбъединитьПути(КаталогОбъектаМетаданных, "Ext", "RecordSetModule.bsl");	

КонецФункции

Функция НайтиМодульФормы(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("ExchangePlans");
	КаталогиТиповОбъектовМетаданных.Добавить("FilterCriteria");
	КаталогиТиповОбъектовМетаданных.Добавить("SettingsStorages");
	КаталогиТиповОбъектовМетаданных.Добавить("Catalogs");
	КаталогиТиповОбъектовМетаданных.Добавить("Documents");
	КаталогиТиповОбъектовМетаданных.Добавить("DocumentJournals");
	КаталогиТиповОбъектовМетаданных.Добавить("Enums");
	КаталогиТиповОбъектовМетаданных.Добавить("Reports");
	КаталогиТиповОбъектовМетаданных.Добавить("DataProcessors");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCharacteristicTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfAccounts");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCalculationTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("InformationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccumulationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccountingRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("CalculationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("BusinessProcesses");
	КаталогиТиповОбъектовМетаданных.Добавить("Tasks");

	ФайлОбъектаМетаданных = НайтиФормуВКаталогах(ПутьКИсходнымФайлам, КаталогиТиповОбъектовМетаданных, 
		ИдентификаторПрограммногоМодуля);

	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ФайлОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
			"CommonForms", ИдентификаторПрограммногоМодуля);
	КонецЕсли;

	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульФормы(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	КаталогОбъектаМетаданных = КаталогОбъектаМетаданных(ФайлОбъектаМетаданных);
	Возврат ОбъединитьПути(КаталогОбъектаМетаданных, "Ext", "Form", "Module.bsl");	
	
КонецФункции

Функция НайтиМодульКоманды(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля) Экспорт
	
	КаталогиТиповОбъектовМетаданных = Новый Массив;
	КаталогиТиповОбъектовМетаданных.Добавить("ExchangePlans");
	КаталогиТиповОбъектовМетаданных.Добавить("FilterCriteria");
	КаталогиТиповОбъектовМетаданных.Добавить("Catalogs");
	КаталогиТиповОбъектовМетаданных.Добавить("Documents");
	КаталогиТиповОбъектовМетаданных.Добавить("DocumentJournals");
	КаталогиТиповОбъектовМетаданных.Добавить("Enums");
	КаталогиТиповОбъектовМетаданных.Добавить("Reports");
	КаталогиТиповОбъектовМетаданных.Добавить("DataProcessors");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCharacteristicTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfAccounts");
	КаталогиТиповОбъектовМетаданных.Добавить("ChartsOfCalculationTypes");
	КаталогиТиповОбъектовМетаданных.Добавить("InformationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccumulationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("AccountingRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("CalculationRegisters");
	КаталогиТиповОбъектовМетаданных.Добавить("BusinessProcesses");
	КаталогиТиповОбъектовМетаданных.Добавить("Tasks");
	
	ФайлОбъектаМетаданных = НайтиКомандуВКаталогах(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля,
		КаталогиТиповОбъектовМетаданных);
	
	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ФайлОбъектаМетаданных = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
			"CommonCommands", ИдентификаторПрограммногоМодуля);
	КонецЕсли;

	Если ФайлОбъектаМетаданных = Неопределено Тогда
		ОбработчикиФорматов.НеНайденМодульКоманды(ИдентификаторПрограммногоМодуля);
		Возврат Неопределено;
	КонецЕсли;

	КаталогОбъектаМетаданных = КаталогОбъектаМетаданных(ФайлОбъектаМетаданных);
	Возврат ОбъединитьПути(КаталогОбъектаМетаданных, "Ext", "CommandModule.bsl");	

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторОбъектаМетаданных(ФайлОбъектаМетаданных)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОбъектаМетаданных.ПолноеИмя);
	ЧтениеXML.ПерейтиКСодержимому();
	ЧтениеXML.Прочитать();
	ИдентификаторМетаданных = ЧтениеXML.ЗначениеАтрибута("uuid");
	ЧтениеXML.Закрыть();

	Возврат ИдентификаторМетаданных;

КонецФункции

Функция ПодчиненныеОбъектыМетаданных(ФайлОбъектаМетаданных, ЛокальноеИмяТипа)

	Результат = Новый Структура;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОбъектаМетаданных.ПолноеИмя);
	ЧтениеXML.ПерейтиКСодержимому();
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл

		Если ЧтениеXML.ЛокальноеИмя = "ChildObjects" Тогда
			
			ЧтениеXML.Прочитать();
			Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
				
				Если ЧтениеXML.ЛокальноеИмя = ЛокальноеИмяТипа Тогда
					
					ИдентификаторМетаданных = ЧтениеXML.ЗначениеАтрибута("uuid");
					
					ЧтениеXML.Прочитать();
					Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл

						Если ЧтениеXML.ЛокальноеИмя = "Properties" Тогда
							ЧтениеXML.Прочитать();
							Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл	
								
								Если ЧтениеXML.ЛокальноеИмя = "Name" Тогда
									ЧтениеXML.Прочитать();
									ИмяВложенногоОбъекта = ЧтениеXML.Значение;
									Результат.Вставить(ИмяВложенногоОбъекта, ИдентификаторМетаданных);
									ЧтениеXML.Прочитать();
								Иначе
									ЧтениеXML.Пропустить();
									ЧтениеXML.Прочитать();
								КонецЕсли;	

							КонецЦикла;
							ЧтениеXML.Прочитать();
						Иначе	
							ЧтениеXML.Пропустить();
							ЧтениеXML.Прочитать();
						КонецЕсли;
	
					КонецЦикла;
					ЧтениеXML.Прочитать();

				Иначе
					ЧтениеXML.Пропустить();
					ЧтениеXML.Прочитать();
				КонецЕсли;

			КонецЦикла;	
			ЧтениеXML.Прочитать();

		Иначе
			ЧтениеXML.Пропустить();
			ЧтениеXML.Прочитать();
		КонецЕсли;

	КонецЦикла;
	
	ЧтениеXML.Закрыть();

	Возврат Результат;

КонецФункции

Функция НайтиОбъектМетаданныхВКаталогах(ПутьКИсходнымФайлам, КаталогиТиповОбъектовМетаданных, 
		ИдентификаторПрограммногоМодуля)

	Результат = Неопределено;

	Для Каждого КаталогТипаОбъектовМетаданных Из КаталогиТиповОбъектовМетаданных Цикл

		Результат = НайтиОбъектМетаданных(ПутьКИсходнымФайлам, 
			КаталогТипаОбъектовМетаданных, ИдентификаторПрограммногоМодуля);
		
		Если ТипЗнч(Результат) = Тип("Файл") Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция НайтиФормуВКаталогах(ПутьКИсходнымФайлам, КаталогиТиповОбъектовМетаданных, ИдентификаторПрограммногоМодуля)
	
	Результат = Неопределено;

	Для Каждого КаталогТипаОбъектовМетаданных Из КаталогиТиповОбъектовМетаданных Цикл

		Результат = НайтиПодОбъектыМетаданных(ПутьКИсходнымФайлам, КаталогТипаОбъектовМетаданных, 
			"Forms", ИдентификаторПрограммногоМодуля);
		
		Если ТипЗнч(Результат) = Тип("Файл") Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция НайтиКомандуВКаталогах(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля, КаталогиТиповОбъектовМетаданных)

	Результат = Неопределено;

	Для Каждого КаталогТипаОбъектовМетаданных Из КаталогиТиповОбъектовМетаданных Цикл

		КаталогПоиска = ОбъединитьПути(ПутьКИсходнымФайлам, КаталогТипаОбъектовМетаданных);
		ФайлыОбъектовМетаданных = НайтиФайлы(КаталогПоиска, "*.xml");
		Для Каждого ФайлОбъектаМетаданных Из ФайлыОбъектовМетаданных Цикл

			КаталогОбъектаМетаданных = ОбъединитьПути(ФайлОбъектаМетаданных.Путь, ФайлОбъектаМетаданных.ИмяБезРасширения);
			ПодчиненныеОбъектыМетаданных = ПодчиненныеОбъектыМетаданных(ФайлОбъектаМетаданных, "Command");
			Для Каждого КлючИЗначение Из ПодчиненныеОбъектыМетаданных Цикл

				ИдентификаторОбъектаМетаданных = КлючИЗначение.Значение;
				ИмяОбъектаМетаданных           = КлючИЗначение.Ключ; 

				ИмяКаталогаВложенного = ОбъединитьПути(КаталогОбъектаМетаданных, "Commands", ИмяОбъектаМетаданных);
				КаталогВложенногоОбъекта = Новый Файл(ИмяКаталогаВложенного);

				Если ИдентификаторОбъектаМетаданных = ИдентификаторПрограммногоМодуля Тогда
					Результат = КаталогВложенногоОбъекта;
					Прервать;
				КонецЕсли;

			КонецЦикла;
		
			Если ТипЗнч(Результат) = Тип("Файл") Тогда
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТипЗнч(Результат) = Тип("Файл") Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция НайтиОбъектМетаданных(ПутьКИсходнымФайлам, ПодКаталогОбъектовМетаданных, ИдентификаторПрограммногоМодуля)

	ШаблонКлючаКеша = "%1+%2";

	КлючКеша = СтрШаблон(ШаблонКлючаКеша, ИдентификаторПрограммногоМодуля, ПутьКИсходнымФайлам);
	Результат = КешФайлов.Получить(КлючКеша);
	Если ТипЗнч(Результат) = Тип("Файл") Тогда
		Возврат Результат;
	КонецЕсли;

	КаталогПоиска = ОбъединитьПути(ПутьКИсходнымФайлам, ПодКаталогОбъектовМетаданных);
	ФайлыОбъектовМетаданных = НайтиФайлы(КаталогПоиска, "*.xml");
	Для Каждого ФайлОбъектаМетаданных Из ФайлыОбъектовМетаданных Цикл
				
		ИдентификаторОбъектаМетаданных = ИдентификаторОбъектаМетаданных(ФайлОбъектаМетаданных);
		
		КлючКеша = СтрШаблон(ШаблонКлючаКеша, ИдентификаторОбъектаМетаданных, ПутьКИсходнымФайлам);
		Если КешФайлов.Получить(КлючКеша) = Неопределено Тогда
			КешФайлов.Вставить(КлючКеша, ФайлОбъектаМетаданных);
		КонецЕсли;
				
		Если ИдентификаторОбъектаМетаданных = ИдентификаторПрограммногоМодуля Тогда
			Результат = ФайлОбъектаМетаданных;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция НайтиПодОбъектМетаданных(ПутьКИсходнымФайлам, КаталогОбъектаМетаданных, 
		ТипПодОбъекта, ИдентификаторПрограммногоМодуля)

	Результат = Неопределено;

	КаталогПодОбъектов = ОбъединитьПути(КаталогОбъектаМетаданных.Путь, 
		КаталогОбъектаМетаданных.ИмяБезРасширения, 
		ТипПодОбъекта);
	
	ФайлыПодОбъектов = НайтиФайлы(КаталогПодОбъектов, "*.xml");
	Для Каждого ФайлПодОбъекта Из ФайлыПодОбъектов Цикл
		
		ИдентификаторОбъектаМетаданных = ИдентификаторОбъектаМетаданных(ФайлПодОбъекта);
		ДобавитьОбъектВКеш(ПутьКИсходнымФайлам, ИдентификаторОбъектаМетаданных, ФайлПодОбъекта);

		Если ИдентификаторОбъектаМетаданных = ИдентификаторПрограммногоМодуля Тогда
			Результат = ФайлПодОбъекта;
		КонецЕсли;

	КонецЦикла;	

	Возврат Результат;

КонецФункции

Функция НайтиПодОбъектыМетаданных(ПутьКИсходнымФайлам, ТипОбъектов, ТипПодобъектов, ИдентификаторПрограммногоМодуля)

	Результат = Неопределено;
	
	КаталогРегистрыРасчета = ОбъединитьПути(ПутьКИсходнымФайлам, ТипОбъектов);
	ФайлыРегистровРасчета = НайтиФайлы(КаталогРегистрыРасчета, "*.xml");
	Для Каждого ФайлРегистраРасчетов Из ФайлыРегистровРасчета Цикл

		Результат = НайтиПодОбъектМетаданных(ПутьКИсходнымФайлам, ФайлРегистраРасчетов, 
			ТипПодобъектов, ИдентификаторПрограммногоМодуля);
		
		Если ТипЗнч(Результат) = Тип("Файл") Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция КаталогОбъектаМетаданных(ФайлОбъектаМетаданных)
	Возврат ОбъединитьПути(ФайлОбъектаМетаданных.Путь, ФайлОбъектаМетаданных.ИмяБезРасширения);
КонецФункции

Функция КлючКеша(ИдентификаторОбъектаМетаданных, ПутьКИсходнымФайлам)
	Возврат СтрШаблон("%1+%2", ИдентификаторОбъектаМетаданных, ПутьКИсходнымФайлам);
КонецФункции

Процедура ДобавитьОбъектВКеш(ПутьКИсходнымФайлам, ИдентификаторПрограммногоМодуля, ЗначениеФайл)

	КлючКеша = КлючКеша(ИдентификаторПрограммногоМодуля, ПутьКИсходнымФайлам);
	Если КешФайлов.Получить(КлючКеша) = Неопределено Тогда
		КешФайлов.Вставить(КлючКеша, ЗначениеФайл);
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

КешФайлов = Новый Соответствие;