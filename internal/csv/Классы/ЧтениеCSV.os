
Перем ПотокCSV;
Перем Разделитель;
Перем ТекущееЗначение;
Перем ПоляЗаголовка;

#Область ПрограммныйИнтерфейс

// Открывает CSV-файл для чтения. Если перед вызовом данного метода уже приозводилось чтение CSV из другого файла, 
// строки или потока, то текущее чтение пркращается, и начинается новое из указанного файла.
//
// Параметры:
//   ИмяФайла - Строка - Имя файла, содержащего текст CSV. 
//
Процедура УстановитьФайл(ИмяФайла) Экспорт

	ЗакрытьПотокCSV();

	ПотокCSV = Новый ЧтениеТекста();
	ПотокCSV.Открыть(ИмяФайла, КодировкаТекста.UTF8);
	Разделитель = ",";
	ПоляЗаголовка = Новый Массив();

КонецПроцедуры

// Выполняет чтение значения CSV.
//
//  Возвращаемое значение:
//   Булево - Прочитана ли строка (Истина) или достигнут конец файла (Ложь)
//
Функция Прочитать() Экспорт

	ТекущееЗначение = Неопределено;

	СтрокаCSV = ПотокCSV.ПрочитатьСтроку();

	Если ТипЗнч(СтрокаCSV) = Тип("Строка") Тогда
		ТекущееЗначение = РазобратьCSV(СтрокаCSV);
		Возврат Истина;			
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Завершает чтение текста CSV из файла или строки.
//
Процедура Закрыть() Экспорт

	ЗакрытьПотокCSV();

КонецПроцедуры

Функция ТекущееЗначение() Экспорт
	Возврат ТекущееЗначение;
КонецФункции

Функция ТекущиеЗначенияПолей(ВозвращатьСтруктуру = Ложь) Экспорт
	
	Если ВозвращатьСтруктуру Тогда
		Результат = Новый Структура;
	Иначе
		Результат = Новый Соответствие;
	КонецЕсли;

	Если ТипЗнч(ТекущееЗначение()) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;

	МинимальноеКоличествоЭлементов = Мин(ПоляЗаголовка.Количество(), ТекущееЗначение.Количество());
	Если МинимальноеКоличествоЭлементов = 0 Тогда
		
		ШаблонИмени = "Значение_%1";
		Для Индекс = 0 По ТекущееЗначение.Количество() Цикл
			КлючЗначения = СтрШаблон(ШаблонИмени, XMLСтрока(Индекс));
			Результат.Вставить(КлючЗначения, ТекущееЗначение[Индекс]);	
		КонецЦикла;

	Иначе

		Для Индекс = 0 По МинимальноеКоличествоЭлементов - 1 Цикл
			Результат.Вставить(ПоляЗаголовка[Индекс], ТекущееЗначение[Индекс]);	
		КонецЦикла;
	
	КонецЕсли;	

	Возврат Результат;

КонецФункции

Процедура УстановитьПоляЗаголовка(ПараметрПоляЗаголовка) Экспорт
	ПоляЗаголовка = ПараметрПоляЗаголовка;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗакрытьПотокCSV()

	Если ТипЗнч(ПотокCSV) = Тип("ЧтениеТекста") Тогда
		ПотокCSV.Закрыть();
	КонецЕсли;

	ПотокCSV = Неопределено;

КонецПроцедуры

// BSLLS-off
// Адаптирован алгоритм powershell
// https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Utility/commands/utility/Csv.cs
//
// Судя по всему этому коду лет 30 (тридцать), не меньше.
Функция РазобратьCSV(Знач СтрокаCSV)

	Результат = Новый Массив;
	СтрокаCSV = СокрЛП(СтрокаCSV);

	Если ПустаяСтрока(СтрокаCSV) ИЛИ Лев(СтрокаCSV, 1) = "#" Тогда
		Возврат Результат;
	КонецЕсли;

	ВременнаяСтрока = "";
	РежимЭкранирования = Ложь;
	ДлинаСтрокиCSV = СтрДлина(СтрокаCSV);
	Для Позиция = 1 По ДлинаСтрокиCSV Цикл

		ТекущийСимвол = Сред(СтрокаCSV, Позиция, 1);
		
		Если ТекущийСимвол = Разделитель Тогда

			Если РежимЭкранирования Тогда
				ВременнаяСтрока = ВременнаяСтрока + ТекущийСимвол;
			Иначе
				Результат.Добавить(ВременнаяСтрока);
				ВременнаяСтрока = ""; 
			КонецЕсли;
		
		Иначе 
			
			Если ТекущийСимвол = """" Тогда
				
				Если РежимЭкранирования Тогда
					
					Если Позиция = ДлинаСтрокиCSV Тогда
						Результат.Добавить(ВременнаяСтрока);
						ВременнаяСтрока = "";
						РежимЭкранирования = Ложь;
						Прервать;
					
					КонецЕсли;

					СледующийСимвол = Сред(СтрокаCSV, Позиция + 1, 1);
					Если СледующийСимвол = Разделитель Тогда
						Результат.Добавить(ВременнаяСтрока);
						ВременнаяСтрока = "";
						РежимЭкранирования = Ложь;	
						Позиция = Позиция + 1;
					
					ИначеЕсли СледующийСимвол = """" Тогда
						ВременнаяСтрока = ВременнаяСтрока + """";
						Позиция = Позиция + 1;
					
					Иначе
						РежимЭкранирования = Ложь;
					КонецЕсли;
				
				Иначе
					РежимЭкранирования = Истина;
				КонецЕсли;
			
			Иначе
				ВременнаяСтрока = ВременнаяСтрока + ТекущийСимвол;
			
			КонецЕсли;	

		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(ВременнаяСтрока) Тогда
		Результат.Добавить(ВременнаяСтрока);
	КонецЕсли;

	Возврат Результат; 

КонецФункции
// BSLLS-on

#КонецОбласти
